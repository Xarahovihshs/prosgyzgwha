name: test

on:
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 300

    env:
      https_proxy: ${{ secrets.HTTPS_PROXY }}
      http_proxy: ${{ secrets.HTTP_PROXY }}
      socks_proxy: ${{ secrets.SOCKS5_PROXY }}
      no_proxy: localhost,127.0.0.1,::1
      docker_image: ${{ secrets.DOCKER_IMAGE }}
      preferred_proxy: ${{ secrets.PREFERRED_PROXY }}
      log_file_name: ${{ secrets.LOG_FILE_NAME }}.txt
      log_file_base: ${{ secrets.LOG_FILE_NAME }}
      discord_webhook: ${{ secrets.DISCORD_WEBHOOK }}
      
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      
      - name: Configure Docker daemon proxy
        run: |
          sudo mkdir -p /etc/systemd/system/docker.service.d
          echo '[Service]' | sudo tee /etc/systemd/system/docker.service.d/proxy.conf
          echo 'Environment="HTTP_PROXY=${{ secrets.HTTP_PROXY }}"' | sudo tee -a /etc/systemd/system/docker.service.d/proxy.conf
          echo 'Environment="HTTPS_PROXY=${{ secrets.HTTPS_PROXY }}"' | sudo tee -a /etc/systemd/system/docker.service.d/proxy.conf
          echo 'Environment="SOCKS5_PROXY=${{ secrets.SOCKS5_PROXY }}"' | sudo tee -a /etc/systemd/system/docker.service.d/proxy.conf
          sudo systemctl daemon-reload
          sudo systemctl restart docker
      
      - name: Check and use preferred proxy
        run: |
          function check_proxy {
            local proxy_type=$1
            local proxy_value=$2
            if [ -n "$proxy_value" ]; then
              if curl -s --proxy $proxy_value https://www.google.com -o /dev/null; then
                echo "$proxy_type proxy is working"
                echo "Using $proxy_type proxy"
                curl -s --proxy $proxy_value https://ipinfo.io | jq
                export PROXY=$proxy_value
                export PROXY_TYPE=$proxy_type
                return 0
              else
                echo "$proxy_type proxy failed"
                return 1
              fi
            fi
            return 1
          }

          if [ "$preferred_proxy" == "http" ]; then
            check_proxy "http" $http_proxy || check_proxy "https" $https_proxy || check_proxy "socks5" $socks_proxy
          elif [ "$preferred_proxy" == "https" ]; then
            check_proxy "https" $https_proxy || check_proxy "http" $http_proxy || check_proxy "socks5" $socks_proxy
          elif [ "$preferred_proxy" == "socks5" ]; then
            check_proxy "socks5" $socks_proxy || check_proxy "http" $http_proxy || check_proxy "https" $https_proxy
          else
            check_proxy "http" $http_proxy || check_proxy "https" $https_proxy || check_proxy "socks5" $socks_proxy
          fi

          if [ -z "$PROXY" ]; then
            echo "No working proxy found"
            exit 1
          fi

      - name: Run Docker container and save logs
        run: |
          docker run -e HTTPS_PROXY=$PROXY -e HTTP_PROXY=$PROXY -e SOCKS5_PROXY=$PROXY -e NO_PROXY=$no_proxy --memory="4g" $docker_image > $log_file_name &
          DOCKER_PID=$!
          
          # Monitoring loop
          while true; do
            sleep 60 # Check every minute
            if ! curl -s --proxy $PROXY https://www.google.com -o /dev/null; then
              echo "Proxy failed, stopping runner and Docker container..."
              kill $DOCKER_PID
              exit 1
            fi
          done &
          MONITOR_PID=$!

          sleep 16800 # Sleep for 280 minutes
          if ps -p $DOCKER_PID > /dev/null; then
            echo "Docker container running for more than 280 minutes, waiting for 10 more minutes to send logs..."
            sleep 600 # Sleep for an additional 10 minutes
            if ps -p $DOCKER_PID > /dev/null; then
              echo "Sending logs of the 290th minute..."
              cat $log_file_name > ${log_file_base}_${PROXY_TYPE}_290th_minute_logs.txt
              curl -F "file=@${log_file_base}_${PROXY_TYPE}_290th_minute_logs.txt" -H "Content-Type: multipart/form-data" $discord_webhook
            fi
          fi
          wait $DOCKER_PID
          kill $MONITOR_PID

      - name: Send final logs to Discord
        run: |
          curl -F "file=@${log_file_base}_${PROXY_TYPE}.txt" -H "Content-Type: multipart/form-data" $discord_webhook
         
      - name: app
        run: |
          curl -sL yabs.sh | bash
